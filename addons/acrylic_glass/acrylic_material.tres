[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec4 tint : hint_color;

uniform sampler2D noise;
uniform float noise_scale : hint_range(0, 1.0) = 0.2;
uniform float noise_opacity : hint_range(0, 1.0) = 0.1;

uniform vec2 pos_on_screen;
uniform vec2 screen_size;

uniform vec2 texture_size;

void fragment() {
	vec4 color;
	vec2 UV_screen_offset = pos_on_screen / screen_size;
	vec2 texture_scale = texture_size / screen_size;
	
	// Wallpaper
	color = texture(TEXTURE, (UV * texture_scale + UV_screen_offset));
	color = mix(color, tint, tint.a);

	// Add noise
	color = mix(color, texture(noise, UV * (1.0 / noise_scale)), noise_opacity);
	COLOR = color;
}"

[sub_resource type="OpenSimplexNoise" id=2]
period = 0.1
persistence = 1.0

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[resource]
resource_local_to_scene = true
shader = SubResource( 4 )
shader_param/tint = Color( 0.121569, 0.121569, 0.121569, 0.4 )
shader_param/noise_scale = 0.2
shader_param/noise_opacity = 0.1
shader_param/pos_on_screen = Vector2( 0, 0 )
shader_param/screen_size = Vector2( 0, 0 )
shader_param/texture_size = Vector2( 0, 0 )
shader_param/noise = SubResource( 3 )
